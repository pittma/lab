#+TITLE: Petri Nets, Graphs, and Concurrency

This is borne from a conversation on the CT Zulip about graphs,
process calculi, and, eventually, Petri nets. It started [[https://categorytheory.zulipchat.com/#narrow/stream/235484-theory.3A-concurrency/topic/proarrow.20equipments.20in.20concurrency][here]], but
that lead to [[https://categorytheory.zulipchat.com/#narrow/stream/235484-theory.3A-concurrency/topic/Nets.20Within.20Nets.20From.20Grothendieck][here]], which is where I'll start.


* Petri Nets

A graphical way to represent states, distributed systems, &c. They're
bipartite, consisting of /places/ and /transitions/. Places are
represented as circles while transitions are rectangles. There's a
third part to these graphs, called /arcs/ that are the edges
connecting places and transitions, or vice versa.

- tokens :: marks in a place that represent  a “current state” of that place.
- markings :: describes or captures the state of all the places w/r/t
  to their tokens in a given instance of a net.

** Grothendieck Contruction

An intuition that occurred to me while reading the blog post above:
The purpose of the grothendieck contstruction is to create categories
from arbitrary objects from some other category.

The idea is that you've got a $\textbf{Cat}$ valued functor, $F$ for
some category $\mathcal{C}$: $F: \mathcal{C} \rightarrow \textbf{Set}$
which you use to create a new category whose objects are pairs $(c,
x)$ where $c \in \mathcal{C}$ and $x$ is in $\textbf{Cat}$ via $F(c)$
and morphisms are pairs which work the same way, completing the
square. This is why it's called gluing, because it's the same idea.

$$
\xymatrix{
  c \ar[r]_f \ar[d]_F & c' \ar[d]^F\\
  F(c) \ar[r]_{F(f)} & F(c')
}
$$

Type theoretically, this is a sigma: $\text{Groth}: \Sigma_{(c :
\mathcal{C})}F(c)$ where $\Pi_{(c : \mathcal{C})}F(x)$ (of
course). The inhabitants of $\text{Groth}$ are the usual dependent
pairs: $(x, F(x))$.

* Nets within Nets within…

A [[https://jadeedenstarmaster.wordpress.com/2021/01/29/nets-within-nets-from-the-grothendieck-construction/][Jade Master blog post]] to cover hierarchical nets where a net's
tokens are themselves marked nets. This arose after a discussion about
representing the two types of graphs that one may choose to model
concurrent actors. Namely, the timeline view, illustrating interacting
actors, and the transition view, that illustrates the causal relation
from event to event.

